<style lang="less">
@import './styles/style';
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import api from './api/api'
import { USER_TOKEN } from './utils/constant'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/home',
      'pages/personal',
      'pages/my',
      'pages/login'
    ],
    window: {
      navigationBarTextStyle: 'white',
      navigationBarTitleText: '大鱼接龙',
      navigationBarBackgroundColor: '#ff4545',
      enablePullDownRefresh: false,
      backgroundColorTop: '#f6f6f6',
      backgroundColorBottom: '#f6f6f6'
    },
    tabBar: {
      color: '#666666',
      selectedColor: '#ff4545',
      borderStyle: 'black',
      backgroundColor: '#ffffff',
      list: [
        {
          pagePath: 'pages/home',
          iconPath: 'images/icon-home.png',
          selectedIconPath: 'images/icon-home-highlight.png',
          text: '大鱼圈子'
        },
        {
          pagePath: 'pages/my',
          iconPath: 'images/icon-my.png',
          selectedIconPath: 'images/icon-my-highlight.png',
          text: '个人中心'
        }]
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  onLaunch() {
    this.login()
    this.updateManager()
  }

  onHide() {
    this.state = 0
  }

  async login() {
    let wxf = ''
    let token = wepy.getStorageSync(USER_TOKEN)
    if (this.globalData.wxf) {
      wxf = this.globalData.wxf
    }
    if (token) {
      let rlt = await api.authToken({
        query: {
          wxf: wxf
        }
      })
      if (rlt.data.code !== 0) {
        wx.removeStorageSync('USER_TOKEN')
        this.state = 1
        this.getTokenReadyCallback(wxf)
        return
      }
      wepy.setStorageSync(USER_TOKEN, token)
      this.globalData.userInfo = rlt.data.data
    } else {
      this.state = 1
      this.getTokenReadyCallback(wxf)
    }
  }

  getTokenReadyCallback(wxf) {
    setTimeout(() => {
      if (!wepy.getStorageSync(USER_TOKEN)) {
        this.state = 0
        wepy.navigateTo({
          url: '/pages/login?wxf=' + wxf
        })
      } else {
        this.getTokenReadyCallback(wxf)
      }
    })
  }

  /**
   * 版本跟新
   */
  updateManager() {
    if (wx.canIUse('getUpdateManager')) {
      const updateManager = wx.getUpdateManager()
      updateManager.onCheckForUpdate(function (res) {
        if (res.hasUpdate) {
          updateManager.onUpdateReady(function () {
            wx.showModal({
              title: '更新提示',
              content: '新版本已经准备好，是否重启应用？',
              success: (res) => {
                if (res.confirm) {
                  updateManager.applyUpdate()
                }
              }
            })
          })
          updateManager.onUpdateFailed(function () {
            wx.showModal({
              title: '新版本提示',
              content: '请删除当前小程序，重新搜索访问'
            })
          })
        }
      })
    }
  }
}
</script>
